#ifndef _RESPONDER_H
#define _RESPONDER_H

#include <Arduino.h>

class responder {
    private:
        const uint8_t inverter_modbus_id      = {0x21};
        const uint8_t bauer_pm_modbus_id      = {0x2A};
        const uint8_t imd_modbus_id           = {0x37};
        const uint8_t imd_w_error_modbus_id   = {0x38};
        const uint8_t imd_not_ready_modbus_id = {0x39};
        const uint8_t powermeter_dc_modbus_id = {0x4D};

        char    bufferstr[200]      = {0};
        bool    stringComplete      = {false};
        uint8_t inputArray[200]     = {0};
        uint8_t outputArray[200]    = {0};
        uint8_t i                   = {0};
        uint8_t j                   = {0};
        bool    send_response       = {true};
        uint8_t length_of_response  = {10};

        unsigned char stripped_incomming_rtu_response[0x87] = 
            {0x42,0x41,0x55,0x45,0x52,0x20,0x45,0x6C,0x65,0x63,0x74,0x72,0x6F,0x6E,
             0x69,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x42,0x53,0x4D,0x2D,0x57,0x53,0x33,0x36,0x41,0x2D,
             0x48,0x30,0x31,0x2D,0x31,0x33,0x31,0x31,0x2D,0x30,0x30,0x30,0x30,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x2E,0x39,0x3A,
             0x33,0x32,0x43,0x41,0x3A,0x41,0x46,0x46,0x34,0x00,0x00,0x00,0x32,0x31,
             0x30,0x37,0x30,0x30,0x31,0x39,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             0x00,0x00,0x00,0x2A,0x80,0x00};
        
        bool bauer_pm_test          = {false};
        bool simulate_imd           = {false};
        bool simulate_imd_error     = {false};
        bool simulate_imd_not_ready = {false};
        bool simulate_inverter      = {false};
        bool simulate_powermeter_dc = {false};


        void select_device_based_on_package(uint8_t selector);
        void create_imd_response();
        void create_bauer_powermeter_response();
        void create_inverter_response();
        void create_powermeter_dc_response();
        void create_random_response();
        void send_modbus_response();
        void clean_arrays();

    public:
        responder();
        ~responder();

        void run();
};

#endif // _RESPONDER_H
